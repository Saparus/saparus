service: saparus-backend

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs20.x
  region: us-west-2
  environment:
    ABOUT_TABLE: AboutTable
    CHILDREN_PROGRAMS_TABLE: ChildrenProgramsTable
    NEWS_TABLE: NewsTable
    PRODUCTS_TABLE: ProductsTable
    USERS_TABLE: UsersTable
    JWT_SECRET: ${{secrets.JWT_SECRET}}
    BUCKET_NAME: ${{secrets.BUCKET_NAME}}

plugins:
  - serverless-iam-roles-per-function

functions:
  # Authentication
  verify-token:
    handler: src/handlers/auth/authorize
    name: verify-token
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt UsersTable.Arn

  registerUser:
    handler: src/handlers/auth/register
    name: register-user
    events:
      - http:
          path: auth/register
          method: post
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: !GetAtt UsersTable.Arn

  loginUser:
    handler: src/handlers/auth/login
    name: login-user
    events:
      - http:
          path: auth/login
          method: post
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt UsersTable.Arn

  # About
  getAbout:
    handler: src/handlers/about/getAllAboutItems
    name: get-about
    events:
      - http:
          path: about
          method: get
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt AboutTable.Arn

  getAllAboutItemsForAdmin:
    handler: src/handlers/about/getAllAboutItemsForAdmin
    name: get-about-admin
    iamRoleStatementsName: get-about-admin-role
    events:
      - http:
          path: about
          method: get
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt AboutTable.Arn

  editAllAboutItems:
    handler: src/handlers/about/editAllAboutItems
    name: edit-all-about-items
    events:
      - http:
          path: about
          method: put
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
          - "dynamodb:DeleteItem"
          - "dynamodb:PutItem"
          - "s3:PutObject"
        Resource:
          - !GetAtt AboutTable.Arn
          - arn:aws:s3:::${env.BUCKET_NAME}/*

  # Children Program
  createChildrenProgram:
    handler: src/handlers/childrenProgram/createChildrenProgram
    name: create-children
    iamRoleStatementsName: create-children-role
    events:
      - http:
          path: children-program/create
          method: post
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
          - "s3:PutObject"
        Resource:
          - !GetAtt ChildrenProgramsTable.Arn
          - arn:aws:s3:::${env.BUCKET_NAME}/*

  getChildrenProgram:
    handler: src/handlers/childrenProgram/getChildrenProgram
    name: get-children
    iamRoleStatementsName: get-children-role
    events:
      - http:
          path: children-program/{id}
          method: get
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt ChildrenProgramsTable.Arn

  editChildrenProgram:
    handler: src/handlers/childrenProgram/editChildrenProgram
    name: edit-children
    iamRoleStatementsName: edit-children-role
    events:
      - http:
          path: children-program/edit/{id}
          method: post
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
          - "s3:PutObject"
        Resource:
          - !GetAtt ChildrenProgramsTable.Arn
          - arn:aws:s3:::${env.BUCKET_NAME}/*

  deleteChildrenProgram:
    handler: src/handlers/childrenProgram/deleteChildrenProgram
    name: delete-children-
    iamRoleStatementsName: delete-children-role
    events:
      - http:
          path: children-program/{id}
          method: delete
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: !GetAtt ChildrenProgramsTable.Arn

  getAllChildrenPrograms:
    handler: src/handlers/childrenProgram/getAllChildrenPrograms
    name: get-all-children
    iamRoleStatementsName: get-all-children-role
    events:
      - http:
          path: children-program
          method: get
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt ChildrenProgramsTable.Arn

  # News
  createNewsItem:
    handler: src/handlers/news/createNewsItem
    name: create-news-item
    iamRoleStatementsName: create-news-item-role
    events:
      - http:
          path: news/create
          method: post
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
          - "s3:PutObject"
        Resource:
          - !GetAtt NewsTable.Arn
          - arn:aws:s3:::${env.BUCKET_NAME}/*

  getNewsItem:
    handler: src/handlers/news/getNewsItem
    name: get-news-item
    iamRoleStatementsName: get-news-item-role
    events:
      - http:
          path: news/{id}
          method: get
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt NewsTable.Arn

  editNewsItem:
    handler: src/handlers/news/editNewsItem
    name: edit-news-item
    iamRoleStatementsName: edit-news-item-role
    events:
      - http:
          path: news/edit/{id}
          method: post
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
          - "s3:PutObject"
        Resource:
          - !GetAtt NewsTable.Arn
          - arn:aws:s3:::${env.BUCKET_NAME}/*

  deleteNewsItem:
    handler: src/handlers/news/deleteNewsItem
    name: delete-news-item
    iamRoleStatementsName: delete-news-item-role
    events:
      - http:
          path: news/{id}
          method: delete
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: !GetAtt NewsTable.Arn

  getAllNewsItems:
    handler: src/handlers/news/getAllNewsItems
    name: get-all-news-items
    iamRoleStatementsName: get-all-news-items-role
    events:
      - http:
          path: news
          method: get
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt NewsTable.Arn

  # Products
  createProduct:
    handler: src/handlers/products/createProduct
    name: create-product
    iamRoleStatementsName: create-product-role
    events:
      - http:
          path: products/create
          method: post
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
          - "s3:PutObject"
        Resource:
          - !GetAtt ProductsTable.Arn
          - arn:aws:s3:::${env.BUCKET_NAME}/*

  getProduct:
    handler: src/handlers/products/getProduct
    name: get-product
    iamRoleStatementsName: get-product-role
    events:
      - http:
          path: products/{id}
          method: get
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt ProductsTable.Arn

  editProduct:
    handler: src/handlers/products/editProduct
    name: edit-product
    iamRoleStatementsName: edit-product-role
    events:
      - http:
          path: products/edit/{id}
          method: post
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
          - "s3:PutObject"
        Resource:
          - !GetAtt ProductsTable.Arn
          - arn:aws:s3:::${env.BUCKET_NAME}/*

  deleteProduct:
    handler: src/handlers/products/deleteProduct
    name: delete-product
    iamRoleStatementsName: deletr-product-role
    events:
      - http:
          path: products/{id}
          method: delete
          authorizer:
            name: verify-token
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: !GetAtt ProductsTable.Arn

  getAllProducts:
    handler: src/handlers/products/getAllProducts
    name: get-all-products
    iamRoleStatementsName: get-all-products-role
    events:
      - http:
          path: products
          method: get
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt ProductsTable.Arn

resources:
  Resources:
    AboutTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AboutTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    ChildrenProgramsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ChildrenProgramsTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    NewsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: NewsTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ProductsTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UsersTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
