service: saparus-backend

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs20.x
  region: us-west-2
  environment:
    ABOUT_TABLE: ${env:ABOUT_TABLE}
    CHILDREN_PROGRAMS_TABLE: ${env:CHILDREN_PROGRAMS_TABLE}
    NEWS_TABLE: ${env:NEWS_TABLE}
    PRODUCTS_TABLE: ${env:PRODUCTS_TABLE}
    BUCKET_NAME: saparus-images
    API_KEY: ${env:API_KEY}
    ACCESS_KEY: ${env:ACCESS_KEY}

plugins:
  - serverless-iam-roles-per-function
  - serverless-prune-plugin

custom:
  prune:
    automatic: true
    number: 3

functions:
  # Authentication
  verify-api-key:
    handler: src/handlers/auth/authorize.authorize
    name: verify-api-key
    events:
      - http:
          path: verify-api-key
          method: get
          cors: true

  loginUser:
    handler: src/handlers/auth/login.login
    name: login-user
    events:
      - http:
          path: auth/login
          method: post
          cors: true

  # About
  getAbout:
    handler: src/handlers/about/getAllAboutItems.getAllAboutItems
    name: get-about
    events:
      - http:
          path: about
          method: get
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt AboutTable.Arn

  getAllAboutItemsForAdmin:
    handler: src/handlers/about/getAllAboutItemsForAdmin.getAllAboutItemsForAdmin
    name: get-about-admin
    iamRoleStatementsName: get-about-admin-role
    events:
      - http:
          path: about/admin
          method: get
          cors: true
          authorizer:
            type: TOKEN
            name: verify-api-key
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt AboutTable.Arn

  editAllAboutItems:
    handler: src/handlers/about/editAllAboutItems.editAllAboutItems
    name: edit-all-about-items
    events:
      - http:
          path: about
          method: patch
          cors: true
          authorizer:
            type: TOKEN
            name: verify-api-key
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
          - "dynamodb:DeleteItem"
          - "dynamodb:PutItem"
          - "s3:PutObject"
          - "s3:DeleteObject"
        Resource:
          - !GetAtt AboutTable.Arn
          - arn:aws:s3:::saparus-images/*

  # Children Program
  createChildrenProgram:
    handler: src/handlers/childrenProgram/createChildrenProgram.createChildrenProgram
    name: create-children
    iamRoleStatementsName: create-children-role
    events:
      - http:
          path: children-program
          method: post
          cors: true
          authorizer:
            type: TOKEN
            name: verify-api-key
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
          - "s3:PutObject"
          - "s3:DeleteObject"
        Resource:
          - !GetAtt ChildrenProgramsTable.Arn
          - arn:aws:s3:::saparus-images/*

  getChildrenProgram:
    handler: src/handlers/childrenProgram/getChildrenProgram.getChildrenProgram
    name: get-children
    iamRoleStatementsName: get-children-role
    events:
      - http:
          path: children-program/{id}
          method: get
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt ChildrenProgramsTable.Arn

  editChildrenProgram:
    handler: src/handlers/childrenProgram/editChildrenProgram.editChildrenProgram
    name: edit-children
    iamRoleStatementsName: edit-children-role
    events:
      - http:
          path: children-program/edit/{id}
          method: patch
          cors: true
          authorizer:
            type: TOKEN
            name: verify-api-key
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
          - "s3:PutObject"
          - "s3:DeleteObject"
        Resource:
          - !GetAtt ChildrenProgramsTable.Arn
          - arn:aws:s3:::saparus-images/*

  deleteChildrenProgram:
    handler: src/handlers/childrenProgram/deleteChildrenProgram.deleteChildrenProgram
    name: delete-children-
    iamRoleStatementsName: delete-children-role
    events:
      - http:
          path: children-program/{id}
          method: delete
          cors: true
          authorizer:
            type: TOKEN
            name: verify-api-key
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: !GetAtt ChildrenProgramsTable.Arn

  getAllChildrenPrograms:
    handler: src/handlers/childrenProgram/getAllChildrenPrograms.getAllChildrenPrograms
    name: get-all-children
    iamRoleStatementsName: get-all-children-role
    events:
      - http:
          path: children-program
          method: get
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt ChildrenProgramsTable.Arn

  getChildrenProgramForAdmin:
    handler: src/handlers/childrenProgram/getChildrenProgramForAdmin.getChildrenProgramForAdmin
    name: get-children-admin
    iamRoleStatementsName: get-children-admin-role
    events:
      - http:
          path: children-program/admin/{id}
          method: get
          cors: true
          authorizer:
            type: TOKEN
            name: verify-api-key
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt ChildrenProgramsTable.Arn

  getAllChildrenProgramsForAdmin:
    handler: src/handlers/childrenProgram/getAllChildrenProgramsForAdmin.getAllChildrenProgramsForAdmin
    name: get-all-children-admin
    iamRoleStatementsName: get-all-children-admin-role
    events:
      - http:
          path: children-program/admin
          method: get
          cors: true
          authorizer:
            type: TOKEN
            name: verify-api-key
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt ChildrenProgramsTable.Arn

  # News
  createNewsItem:
    handler: src/handlers/news/createNewsItem.createNewsItem
    name: create-news-item
    iamRoleStatementsName: create-news-item-role
    events:
      - http:
          path: news/create
          method: post
          cors: true
          authorizer:
            type: TOKEN
            name: verify-api-key
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
          - "s3:PutObject"
          - "s3:DeleteObject"
        Resource:
          - !GetAtt NewsTable.Arn
          - arn:aws:s3:::saparus-images/*

  getNewsItem:
    handler: src/handlers/news/getNewsItem.getNewsItem
    name: get-news-item
    iamRoleStatementsName: get-news-item-role
    events:
      - http:
          path: news/{id}
          method: get
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt NewsTable.Arn

  editNewsItem:
    handler: src/handlers/news/editNewsItem.editNewsItem
    name: edit-news-item
    iamRoleStatementsName: edit-news-item-role
    events:
      - http:
          path: news/edit/{id}
          method: patch
          cors: true
          authorizer:
            type: TOKEN
            name: verify-api-key
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
          - "s3:PutObject"
          - "s3:DeleteObject"
        Resource:
          - !GetAtt NewsTable.Arn
          - arn:aws:s3:::saparus-images/*

  deleteNewsItem:
    handler: src/handlers/news/deleteNewsItem.deleteNewsItem
    name: delete-news-item
    iamRoleStatementsName: delete-news-item-role
    events:
      - http:
          path: news/{id}
          method: delete
          cors: true
          authorizer:
            type: TOKEN
            name: verify-api-key
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: !GetAtt NewsTable.Arn

  getAllNewsItems:
    handler: src/handlers/news/getAllNewsItems.getAllNewsItems
    name: get-all-news-items
    iamRoleStatementsName: get-all-news-items-role
    events:
      - http:
          path: news
          method: get
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt NewsTable.Arn

  getNewsItemForAdmin:
    handler: src/handlers/news/getNewsItemForAdmin.getNewsItemForAdmin
    name: get-news-item-admin
    iamRoleStatementsName: get-news-item-admin-role
    events:
      - http:
          path: news/admin/{id}
          method: get
          cors: true
          authorizer:
            type: TOKEN
            name: verify-api-key
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt NewsTable.Arn

  getAllNewsItemsForAdmin:
    handler: src/handlers/news/getAllNewsItemsForAdmin.getAllNewsItemsForAdmin
    name: get-all-news-items-admin
    iamRoleStatementsName: get-all-news-items-admin-role
    events:
      - http:
          path: news/admin
          method: get
          cors: true
          authorizer:
            type: TOKEN
            name: verify-api-key
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt NewsTable.Arn

  # Products
  createProduct:
    handler: src/handlers/products/createProduct.createProduct
    name: create-product
    iamRoleStatementsName: create-product-role
    events:
      - http:
          path: products
          method: post
          cors: true
          authorizer:
            type: TOKEN
            name: verify-api-key
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
          - "s3:PutObject"
          - "s3:DeleteObject"
        Resource:
          - !GetAtt ProductsTable.Arn
          - arn:aws:s3:::saparus-images/*

  getCategories:
    handler: src/handlers/products/getCategories.getCategories
    name: get-categories
    events:
      - http:
          path: products/categories
          method: get
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt ProductsTable.Arn

  getProduct:
    handler: src/handlers/products/getProduct.getProduct
    name: get-product
    iamRoleStatementsName: get-product-role
    events:
      - http:
          path: products/{id}
          method: get
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt ProductsTable.Arn

  editProduct:
    handler: src/handlers/products/editProduct.editProduct
    name: edit-product
    iamRoleStatementsName: edit-product-role
    events:
      - http:
          path: products/edit/{id}
          method: patch
          cors: true
          authorizer:
            type: TOKEN
            name: verify-api-key
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
          - "s3:PutObject"
          - "s3:DeleteObject"
        Resource:
          - !GetAtt ProductsTable.Arn
          - arn:aws:s3:::saparus-images/*

  deleteProduct:
    handler: src/handlers/products/deleteProduct.deleteProduct
    name: delete-product
    iamRoleStatementsName: delete-product-role
    events:
      - http:
          path: products/{id}
          method: delete
          cors: true
          authorizer:
            type: TOKEN
            name: verify-api-key
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: !GetAtt ProductsTable.Arn

  getAllProducts:
    handler: src/handlers/products/getAllProducts.getAllProducts
    name: get-all-products
    iamRoleStatementsName: get-all-products-role
    events:
      - http:
          path: products
          method: get
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt ProductsTable.Arn

  getProductForAdmin:
    handler: src/handlers/products/getProductForAdmin.getProductForAdmin
    name: get-product-admin
    iamRoleStatementsName: get-product-admin-role
    events:
      - http:
          path: products/admin/{id}
          method: get
          cors: true
          authorizer:
            type: TOKEN
            name: verify-api-key
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt ProductsTable.Arn

  getAllProductsForAdmin:
    handler: src/handlers/products/getAllProductsForAdmin.getAllProductsForAdmin
    name: get-all-products-admin
    iamRoleStatementsName: get-all-products-admin-role
    events:
      - http:
          path: products/admin
          method: get
          cors: true
          authorizer:
            type: TOKEN
            name: verify-api-key
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt ProductsTable.Arn

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: "ApiGatewayRestApi"

    AboutTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AboutTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    ChildrenProgramsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ChildrenProgramsTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    NewsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: NewsTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ProductsTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
